// <auto-generated />
using System;
using ApiExito.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiExito.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ApiExito.Model.Cliente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("cc")
                        .HasColumnType("int");

                    b.Property<string>("celular")
                        .HasColumnType("longtext");

                    b.Property<string>("nit")
                        .HasColumnType("longtext");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ApiExito.Model.ControlVehiculo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("Bateria")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EspejoDerecho")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EspejoIzquierdo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("EspejoRetro")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("KitCarrera")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("LlantaRep")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("LuzDelDer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("LuzDelIz1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("LuzTrasDer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("LuzTrasIz1")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("MarquillaCromada")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("MedidorAceite")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("MemoriaUsb")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OtrosAccesorios")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Pangones")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("PanoramicoDel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("PanoramicoTra")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("PlacaDel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("PlacaTra")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Plumillas")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Radio")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Rayones")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("RejillaAire")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("TapaGasolian")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("TapaRadiador")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("TapasLlanta")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Tapete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Vehiculoid")
                        .HasColumnType("int");

                    b.Property<bool?>("VidriosPuertas")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("condicion_mecanica")
                        .HasColumnType("longtext");

                    b.Property<int?>("dias_garantia")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("fecha_salida")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("kilometraje")
                        .HasColumnType("int");

                    b.Property<int>("nivel")
                        .HasColumnType("int");

                    b.Property<string>("observacion")
                        .HasColumnType("longtext");

                    b.Property<string>("tecnico_encargado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("trabajo_realizar")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Vehiculoid");

                    b.ToTable("ControlVehiculo");
                });

            modelBuilder.Entity("ApiExito.Model.Vehiculo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Clienteid")
                        .HasColumnType("int");

                    b.Property<string>("color")
                        .HasColumnType("longtext");

                    b.Property<string>("diesel_gasolina")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("marca")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("modelo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("placa")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("tipo")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("Clienteid");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApiExito.Model.ControlVehiculo", b =>
                {
                    b.HasOne("ApiExito.Model.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("Vehiculoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("ApiExito.Model.Vehiculo", b =>
                {
                    b.HasOne("ApiExito.Model.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("Clienteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
